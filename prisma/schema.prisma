// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(uuid())
  username         String          @unique
  passwordHash     String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  participants     Participant[]
  messagesSent     Message[]       @relation("MessagesSent")
  messageStatuses  MessageStatus[]
}


model Message {
  id             String        @id @default(uuid())
  content        String        @db.VarChar(255)
  createdAt      DateTime      @default(now())

  sender         User          @relation("MessagesSent", fields: [senderId], references: [id])
  senderId       String

  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String

  statuses       MessageStatus[]

  @@index([conversationId])
  @@index([senderId])
}


model Conversation {
  id           String        @id @default(uuid())
  title        String?
  isGroup      Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  messages     Message[]
  participants Participant[]
}

model Participant {
  id             String        @id @default(uuid())
  user           User          @relation(fields: [userId], references: [id])
  userId         String
  conversation   Conversation  @relation(fields: [conversationId], references: [id])
  conversationId String
  joinedAt       DateTime      @default(now())

  @@unique([userId, conversationId])
}

model MessageStatus {
  id         String   @id @default(uuid())
  message    Message  @relation(fields: [messageId], references: [id])
  messageId  String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  status     MessageDeliveryStatus
  updatedAt  DateTime @default(now())

  @@unique([messageId, userId])
}

enum MessageDeliveryStatus {
  SENT
  DELIVERED
  READ
}
